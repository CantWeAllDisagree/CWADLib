plugins {
    alias libs.plugins.loom
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
    maven { url "https://www.cursemaven.com" }
    maven { url "https://maven.siphalor.de/"}
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://jitpack.io" }

}

loom{
    accessWidenerPath = file("src/main/resources/CWADLib.accesswidener")
}

dependencies {
    minecraft libs.minecraft
    mappings variantOf(libs.yarn) { classifier 'v2' }
    modImplementation libs.bundles.fabricapi
    // ARRP
    modImplementation include("curse.maven:arrp-463113:3901211") { exclude group: "net.fabricmc.fabric-api" }




    // AMECS API
    modApi (libs.amecs) { exclude group: "net.fabricmc.fabric-api" }
    modRuntimeOnly libs.bundles.runtime
}


processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", libs.minecraft
    inputs.property "loader_version", libs.fabricloader
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": libs.minecraft,
                "loader_version": libs.fabricloader
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        modPublication(MavenPublication) {
            from components.java
            groupId = 'cantwealldisagree'
            artifactId = 'CWADLib'
            version = "0.00.0.1-alpha"

            // The following line specifies the path where the JAR file will be published
        }
    }
    repositories {
        maven {
            url "file:///D:/maven/repositories/private/"
        }
    }
}
